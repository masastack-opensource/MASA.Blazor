@using MASA.Blazor.Doc.Models
@using MASA.Blazor.Doc.Services
@inherits OwningComponentBase<DemoService>

<MList Dense Nav Linkage>
    @foreach (var item in MenuItems)
    {
        if (item.Children != null && item.Children.Any())
        {
            var group = GenGroup(item.Children);

            <MListGroup AppendIcon="mdi-menu-down"
                        Class="m-list-group--default"
                        Color="primary"
                        Group="@group"
                        NoAction
                        PrependIcon="@item.Icon">
                <ActivatorContent>
                    <MListItemContent>
                        <MListItemTitle>@item.Title</MListItemTitle>
                    </MListItemContent>
                </ActivatorContent>
                <ChildContent>
                    @foreach (var componentItem in item.Children)
                    {
                        if (componentItem.Children != null && componentItem.Children.Any())
                        {
                            var group2 = GenGroup(componentItem.Children);

                            <MListGroup Class="m-list-group--default"
                                        Group="@group2"
                                        NoAction
                                        SubGroup>
                                <ActivatorContent>
                                    <MListItemContent>
                                        <MListItemTitle>@FormatComponentTitle(componentItem)</MListItemTitle>
                                    </MListItemContent>
                                </ActivatorContent>
                                <ChildContent>
                                    @foreach (var subComponentItem in componentItem.Children)
                                    {
                                        <MListItem Class="m-list-item--default" Href="@subComponentItem.Url">
                                            <MListItemContent>
                                                <MListItemTitle>
                                                    @FormatComponentTitle(subComponentItem)
                                                </MListItemTitle>
                                            </MListItemContent>
                                        </MListItem>
                                    }
                                </ChildContent>
                            </MListGroup>
                        }
                        else
                        {
                            <MListItem Class="m-list-item--default" Href="@componentItem.Url">
                                <MListItemContent>
                                    <MListItemTitle>
                                        @FormatComponentTitle(componentItem)
                                    </MListItemTitle>
                                </MListItemContent>
                            </MListItem>
                        }
                    }
                </ChildContent>
            </MListGroup>
        }
        else
        {
            <MListItem Class="m-list-item--default" Link Href="@item.Url">
                <MListItemIcon>
                    <MIcon>@item.Icon</MIcon>
                </MListItemIcon>
                <MListItemContent>
                    <MListItemTitle>@item.Title</MListItemTitle>
                </MListItemContent>
            </MListItem>
        }
    }
</MList>

@code {

    [Parameter]
    public DemoMenuItemModel[] MenuItems { get; set; } = { };

    protected override async Task OnInitializedAsync()
    {
        MenuItems = await Service.GetMenuAsync();
        await Service.InitializeDemos();
    }

    string FormatComponentTitle(DemoMenuItemModel model)
    {
        return model.FullTitle;
    }

    string GenGroup(DemoMenuItemModel[] items)
    {
        if (items == null || !items.Any()) return string.Empty;

        var groups = new List<string>();

        foreach (var item in items)
        {
            groups.Add(GenGroup(item.Children));

            if (item.Url == null || groups.Contains(item.Url, StringComparer.OrdinalIgnoreCase)) continue;

            groups.Add(item.Url);
        }

        return string.Join("|", groups.Where(g => g != string.Empty));
    }

}